/* fftd.f -- translated by f2c (version 20031025).
   You must link the resulting object file with libf2c:
	on Microsoft Windows system, link with libf2c.lib;
	on Linux or Unix systems, link with .../path/to/libf2c.a -lm
	or, if you install libf2c.a in a standard place, with -lf2c -lm
	-- in that order, at the end of the command line, as in
		cc *.o -lf2c -lm
	Source for libf2c is in /netlib/f2c/libf2c.zip, e.g.,

		http://www.netlib.org/f2c/libf2c.zip
*/

#include "f2c.h"

/* Subroutine */ int fftd_(integer *lx, doublecomplex *cx, logical *forward)
{
    /* System generated locals */
    integer i__1, i__2, i__3;
    doublecomplex z__1;

    /* Builtin functions */
    void z_sqrt(doublecomplex *, doublecomplex *);

    /* Local variables */
    static integer i__, j, l, m, ii;
    static doublecomplex cw, cdel, cdel1;
    static real scale;
    static doublecomplex ctemp;
    static integer istep;


/*  Time for 1024 point double complex fft on ultraSparc170 is about 1.35 ms */
/*  Time for 1024 point double complex fft on sparc 4 (110 MHz) is about 6.3 ms */


    /* Parameter adjustments */
    --cx;

    /* Function Body */
    if (*forward) {
	cdel1.r = 0.f, cdel1.i = -1.f;
    } else {
	cdel1.r = 0.f, cdel1.i = 1.f;
	scale = 1.f / *lx;
	i__1 = *lx;
	for (i__ = 1; i__ <= i__1; ++i__) {
	    i__2 = i__;
	    i__3 = i__;
	    z__1.r = scale * cx[i__3].r, z__1.i = scale * cx[i__3].i;
	    cx[i__2].r = z__1.r, cx[i__2].i = z__1.i;
	}
    }
    j = 1;
    i__1 = *lx;
    for (i__ = 1; i__ <= i__1; ++i__) {
	if (i__ < j) {
	    i__2 = i__;
	    ctemp.r = cx[i__2].r, ctemp.i = cx[i__2].i;
	    i__2 = i__;
	    i__3 = j;
	    cx[i__2].r = cx[i__3].r, cx[i__2].i = cx[i__3].i;
	    i__2 = j;
	    cx[i__2].r = ctemp.r, cx[i__2].i = ctemp.i;
	}
	m = *lx / 2;
	while(j > m && m >= 1) {
	    j -= m;
	    m /= 2;
	}
	j += m;
    }
    l = 1;
    cdel.r = -1.f, cdel.i = 0.f;
    while(l < *lx) {
	istep = l + l;
	cw.r = 1.f, cw.i = 0.f;
	i__1 = l;
	for (m = 1; m <= i__1; ++m) {
	    i__ = m;
	    while(i__ <= *lx) {
		ii = i__ + l;
		i__2 = ii;
		z__1.r = cw.r * cx[i__2].r - cw.i * cx[i__2].i, z__1.i = cw.r 
			* cx[i__2].i + cw.i * cx[i__2].r;
		ctemp.r = z__1.r, ctemp.i = z__1.i;
		i__2 = ii;
		i__3 = i__;
		z__1.r = cx[i__3].r - ctemp.r, z__1.i = cx[i__3].i - ctemp.i;
		cx[i__2].r = z__1.r, cx[i__2].i = z__1.i;
		i__2 = i__;
		i__3 = i__;
		z__1.r = cx[i__3].r + ctemp.r, z__1.i = cx[i__3].i + ctemp.i;
		cx[i__2].r = z__1.r, cx[i__2].i = z__1.i;
		i__ += istep;
	    }
	    z__1.r = cdel.r * cw.r - cdel.i * cw.i, z__1.i = cdel.r * cw.i + 
		    cdel.i * cw.r;
	    cw.r = z__1.r, cw.i = z__1.i;
	}
	l = istep;
	cdel.r = cdel1.r, cdel.i = cdel1.i;
	z_sqrt(&z__1, &cdel1);
	cdel1.r = z__1.r, cdel1.i = z__1.i;
    }
    return 0;
} /* fftd_ */

